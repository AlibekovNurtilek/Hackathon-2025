import re
from sqlalchemy.orm import Session
from fastapi import APIRouter, Depends
from sqlalchemy import or_
from app.database.database import get_db
from app.database.models import Program, FieldOfStudy, Subject, Requirement, program_requirements  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º program_requirements

router = APIRouter()


def extract_number_from_string(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (GPA, GRE, IELTS –∏ —Ç. –¥.) –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    if not text:
        return None
    numbers = re.findall(r"\d+\.?\d*", text)  # –ò—â–µ–º —á–∏—Å–ª–∞ (—Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –±–µ–∑)
    return float(numbers[0]) if numbers else None  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ


@router.post("/programs/filter", summary="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ JSON-—Ñ–∏–ª—å—Ç—Ä—É")
def filter_programs(filters: dict, db: Session = Depends(get_db)):
    query = db.query(Program)

    # 1Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ `location` (—É—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π)
    user_locations = filters.get("course_details", {}).get("location", [])
    if user_locations:
        query = query.filter(
            or_(*[Program.location.ilike(f"%{loc}%") for loc in user_locations])
        )

    # 2Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ `field_of_study` –∏ `subject`
    if filters.get("field_of_study"):
        query = query.join(Program.fields_of_study).filter(FieldOfStudy.name.ilike(f"%{filters['field_of_study']}%"))

    if filters.get("subject"):
        query = query.join(Program.subjects).filter(Subject.name.in_(filters["subject"]))

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
    programs = query.all()

    # 3Ô∏è‚É£ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ `requirements`
    filtered_programs = []
    user_gpa = filters["requirements"].get("GPA")  # GPA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    user_gre = filters["requirements"].get("GRE")  # GRE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    user_language_requirements = filters["requirements"].get("language_requirements", {})

    for program in programs:
        # 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º `requirements` —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ `program_requirements`
        program_requirements_list = (
            db.query(Requirement)
            .join(program_requirements, program_requirements.c.requirement_id == Requirement.id)  # ‚úÖ –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑—å
            .filter(program_requirements.c.program_id == program.id)
            .all()
        )

        # ‚úÖ –ï—Å–ª–∏ —É –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π ‚Üí –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
        if not program_requirements_list:
            filtered_programs.append(program)
            continue

        is_valid = True  # –§–ª–∞–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

        # üî• 5Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ `GPA`
        program_gpa = None
        for req in program_requirements_list:
            if "GPA" in req.detail:
                extracted_gpa = extract_number_from_string(req.detail)
                if extracted_gpa:
                    program_gpa = extracted_gpa

        if program_gpa is not None and user_gpa is not None:
            if user_gpa < program_gpa:
                is_valid = False  # ‚ùå GPA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞

        # üî• 6Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ `GRE`
        program_gre = None
        gre_required = False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–µ–Ω –ª–∏ GRE

        for req in program_requirements_list:
            if "GRE" in req.detail:
                if "recommended" in req.detail.lower():  # GRE: Recommended
                    gre_required = False
                else:
                    extracted_gre = extract_number_from_string(req.detail)
                    if extracted_gre:
                        program_gre = extracted_gre
                        gre_required = True

        if program_gre is not None:
            if user_gre is None or user_gre < program_gre:
                is_valid = False  # ‚ùå –ï—Å–ª–∏ GRE –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç

        if gre_required and user_gre is None:
            is_valid = False  # ‚ùå –ï—Å–ª–∏ GRE –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –µ–≥–æ

        # üî• 7Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ IELTS, TOEFL –∏ –¥—Ä—É–≥–∏–º —Ç–µ—Å—Ç–∞–º
        for lang, user_tests in user_language_requirements.items():
            if not isinstance(user_tests, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                continue
            for test_name, user_score in user_tests.items():
                if user_score:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
                    for req in program_requirements_list:
                        if test_name in req.detail:
                            extracted_score = extract_number_from_string(req.detail)
                            if extracted_score is not None:
                                if float(user_score) < extracted_score:
                                    is_valid = False  # ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –±–∞–ª–ª–∞–º
                                    break

        if is_valid:
            filtered_programs.append(program)

    # 8Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    return [
        {
            "id": program.id,
            "name": program.name,
            "university": program.university.name if program.university else None,
            "location": program.location,
            "duration": program.duration,
            "tuition_fees": program.tuition_fees,
            "language": program.language,
            "mode_of_study": program.mode_of_study,
            "uni_assist": program.uni_assist,
            "application_deadline": program.application_deadline,
            "link": program.link
        }
        for program in filtered_programs
    ]
